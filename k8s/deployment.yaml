apiVersion: v1
kind: Namespace
metadata:
  name: producer-consumer

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: producer-consumer
data:
  dashboards.yml: ../grafana/dashboards.yml
  datasource.yml: ../grafana/datasource.yml

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: producer-consumer
data:
  prometheus.yml: ../prometheus/prometheus.yml

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-data
  namespace: producer-consumer
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-log
  namespace: producer-consumer
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: producer-consumer
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: producer-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management-alpine
          ports:
            - containerPort: 5672
            - containerPort: 15672
          env:
            - name: RABBITMQ_ERLANG_COOKIE
              value: rabbitmq-prometheus
          volumeMounts:
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq
            - name: rabbitmq-log
              mountPath: /var/log/rabbitmq
          resources:
            limits:
              memory: "1Gi"
              cpu: "2"
          livenessProbe:
            exec:
              command:
                - rabbitmq-diagnostics
                - ping
            initialDelaySeconds: 30
            periodSeconds: 30
      volumes:
        - name: rabbitmq-data
          persistentVolumeClaim:
            claimName: rabbitmq-data
        - name: rabbitmq-log
          persistentVolumeClaim:
            claimName: rabbitmq-log

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: producer
  namespace: producer-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: producer
  template:
    metadata:
      labels:
        app: producer
    spec:
      containers:
        - name: producer
          image: gabrielfsil/producer:latest
          ports:
            - containerPort: 3333
          command: ["npm", "run", "start"]
          resources:
            limits:
              memory: "1Gi"
              cpu: "2"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer
  namespace: producer-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consumer
  template:
    metadata:
      labels:
        app: consumer
    spec:
      containers:
        - name: consumer
          image: gabrielfsil/consumer:latest
          ports:
            - containerPort: 3334
          command: ["npm", "run", "start"]
          resources:
            limits:
              memory: "1Gi"
              cpu: "2"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: producer-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:8.3.4
          ports:
            - containerPort: 3000
          env:
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ORG_ROLE
              value: "Admin"
            - name: GF_INSTALL_PLUGINS
              value: "flant-statusmap-panel,grafana-piechart-panel"
            - name: GF_SESSION_PROVIDER
              value: "file"
            - name: GF_SESSION_PROVIDER_CONFIG
              value: "/var/lib/grafana/sessions"
            - name: GF_SECURITY_COOKIE_SAMESITE
              value: "none"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-config
              mountPath: /etc/grafana/provisioning
              subPath: dashboards.yml
              subPath: datasource.yml
            - name: dashboards
              mountPath: /dashboards
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: grafana-config
          configMap:
            name: grafana-config
        - name: dashboards
          configMap:
            name: grafana-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: producer-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.28.1
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-storage
              mountPath: /prometheus
            - name: prometheus-config
              mountPath: /etc/prometheus/prometheus.yml
      volumes:
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-storage
        - name: prometheus-config
          configMap:
            name: prometheus-config

---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: producer-consumer
spec:
  ports:
    - name: amqp
      port: 5672
      targetPort: 5672
    - name: management
      port: 15672
      targetPort: 15672
  selector:
    app: rabbitmq

---
apiVersion: v1
kind: Service
metadata:
  name: producer
  namespace: producer-consumer
spec:
  type: NodePort
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3333
      nodePort: 30000
  selector:
    app: producer

---
apiVersion: v1
kind: Service
metadata:
  name: consumer
  namespace: producer-consumer
spec:
  ports:
    - port: 3334
      targetPort: 3334
  selector:
    app: consumer

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: producer-consumer
spec:
  type: NodePort
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 32000
  selector:
    app: grafana

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: producer-consumer
spec:
  ports:
    - port: 9090
      targetPort: 9090
  selector:
    app: prometheus
